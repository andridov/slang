[
    { "--": "--" },

    { "sl_db_query": "database/slang/QueryDB" },


    { "--": " General queries" },
    { "db_insert_or_ignore": "INSERT OR IGNORE INTO {table} ({columns}) VALUES {values}" },


    { "--": " Creating list of static data that needed at the start of application" },
    { "db_insert_or_ignore_data": [
        {
            "table": "types",
            "columns": ["name", "description"],
            "values": ["note", "item from 'notes' table"]
        },
        {
            "table": "types",
            "columns": ["name", "description"],
            "values": ["word", "word type needed to specify single word"]
        },
        {
            "table": "types",
            "columns": ["name", "description"],
            "values": ["speed_test", "speed_test, results of utilitySpeedTest"]
        },
        {
            "table": "types",
            "columns": ["name", "description"],
            "values": ["tag", "type needed to categorize deques"]
        }
    ] },

    { "sql_delete_empty_term_notes": "DELETE FROM notes WHERE term=''" },

 


    { "--": "delete pervious-varsion data from cards and notes tables     " },
    { "--": "what's going on here:                                        " },
    { "--": " 1. create temp table temp_deque_ids                         " },
    { "--": " 2. fill temp_deque_ids with id, related to deque            " },
    { "--": " 3. delete media data, related to current deque              " },
    { "--": " 4. delete notes data, related to current deque              " },
    { "--": " 5. delete card data, related to current deque               " },
    { "--": " 6. return stat about deleted data                           " },
    { "--": " 7. delete temp_deque_ids table                              " },

    { "sql_delete_deque_instructions": [
        "CREATE TEMPORARY TABLE temp_deque_ids(card_id INT, note_id INT, media_id INT)",
        "INSERT INTO temp_deque_ids SELECT c.id AS card_id, n.id AS note_id, m.id AS media_id FROM deques d JOIN cards c ON c.deque_id=d.id JOIN notes n ON n.card_id=c.id LEFT JOIN media m ON m.id=n.image_id or m.id=n.term_audio_id or m.id=n.definition_audio_id WHERE d.id={deque_id}",
        "DELETE FROM media WHERE id IN (SELECT media_id FROM temp_deque_ids WHERE media_id IS NOT NULL)",
        "DELETE FROM notes WHERE id IN (SELECT note_id FROM temp_deque_ids)",
        "DELETE FROM cards WHERE id IN (SELECT card_id FROM temp_deque_ids)",
        "SELECT COUNT(DISTINCT card_id) as card_count, COUNT(DISTINCT note_id) as note_count, COUNT(DISTINCT media_id) as media_count FROM temp_deque_ids",
        "DROP TABLE temp_deque_ids"
    ]},


    { "sql_select_existing_notes_by_time": "SELECT * FROM notes n WHERE n.creation_time=?" },


    { "--": "SQL insert stuff (update_words_db) " },

    { "sql_insert_language": "INSERT OR IGNORE INTO languages (term_language, definition_language) VALUES('{term_language}', '{definition_language}')" },
    { "sql_select_language": "SELECT id, term_language, definition_language from languages where term_language='{term_language}' and  definition_language='{definition_language}'" },

    { "sql_select_type": "SELECT id, name, description FROM types WHERE name=?" },

    { "sql_insert_tag": "INSERT OR IGNORE INTO tags (name, description) VALUES(?, ?)" },
    { "sql_select_tag": "SELECT id, name, description FROM tags WHERE name=?" },

    { "sql_select_next_scope_id": "SELECT CASE WHEN s.key_id IS NULL THEN 1 ELSE max(s.key_id) + 1 END AS netxt_scope_id , t.id AS type_id FROM types t LEFT OUTER JOIN scope s ON s.scope_type_id = t.id WHERE  t.name = ?" },
    { "sql_insert_scope": "INSERT INTO scope (scope_type_id, key_id, value_id) VALUES (?, ?, ?)" },

    { "sql_insert_deque": "INSERT OR IGNORE INTO deques (file_name, language_id, update_time, version, description, tags_scope_id) VALUES(?, ?, datetime('now'), 0, ?, ?)" },
    { "sql_select_deque": "SELECT id, file_name, language_id, update_time, version, description, tags_scope_id FROM deques WHERE file_name='{file_name}' and  language_id={language_id};" },
    { "sql_update_deque": "UPDATE deques SET update_time=datetime('now'), version={version}, description='{description}' WHERE id={deque_id}" },

    { "sql_insert_card": "INSERT OR IGNORE INTO cards (deque_id) VALUES('{deque_id}')" },
    { "sql_select_card": "SELECT id, deque_id, base_note_id, ex_1_note_id, ex_2_note_id, ex_3_note_id, ex_4_note_id, ex_5_note_id FROM cards WHERE deque_id={deque_id} AND base_note_id={base_note_id} AND ex_1_note_id={ex_1_note_id} AND ex_2_note_id={ex_2_note_id} AND ex_3_note_id={ex_3_note_id} AND ex_4_note_id={ex_4_note_id} AND ex_5_note_id={ex_5_note_id}" },
    { "sql_select_empty_card": "SELECT id FROM cards WHERE deque_id={deque_id} AND base_note_id is NULL" },
    { "sql_update_card": "UPDATE cards SET deque_id=?, base_note_id=?, ex_1_note_id=?, ex_2_note_id=?, ex_3_note_id=?, ex_4_note_id=?, ex_5_note_id=? WHERE id=?" },

    { "sql_insert_note": "INSERT OR IGNORE INTO notes (card_id, creation_time, mod_time, term, term_note, term_audio_id, image_id, definition, definition_note, definition_audio_id, times_used) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0)" },
    { "sql_update_note": "INSERT OR IGNORE INTO notes (card_id, creation_time, mod_time, term, term_note, term_audio_id, image_id, definition, definition_note, definition_audio_id, times_used) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0)" },

    { "sql_insert_media": "INSERT INTO media (data) VALUES(?)" },



    { "--": "--" }
]