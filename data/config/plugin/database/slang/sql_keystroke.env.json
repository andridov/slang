[
    { "--": "--" },

    { "__include": "./sql_slang.env.json" },


    { "__import": "term_lang" },
    { "__import": "definition_lang" },
    { "__import": "minimal_time_interval_str" },

    { "tags": "all" },

    { "--": "selects expired/ntext_expired notes " },
    { "select_notes_left_count" : "SELECT count (DISTINCT n.id) FROM achievements a JOIN types t ON t.id = a.item_type_id JOIN notes n ON n.id = a.item_id JOIN cards c ON c.id = n.card_id JOIN deques d ON d.id = c.deque_id JOIN languages l ON l.id = d.language_id JOIN scope s ON s.key_id = d.tags_scope_id JOIN tags tg ON tg.id = s.value_id OR tg.id = 0 WHERE t.name = 'note' AND  datetime(a.last_used_time + a.pace_time, 'unixepoch') < datetime('now') AND  l.term_language = '$(term_lang)' AND  l.definition_language = '$(definition_lang)' AND  tg.name IN ('$(tags)');" },

    { "sql_select_expired_notes": "SELECT DISTINCT n.id, n.card_id, n.creation_time, n.mod_time, n.term, n.term_note, n.term_audio_id, n.image_id, n.definition, n.definition_note, n.definition_audio_id, n.times_used, a.last_used_time, a.pace_time, a.pace_factor, a.repeat_factor, a.reviews_count FROM achievements a JOIN types t ON t.id = a.item_type_id JOIN notes n ON n.id = a.item_id JOIN cards c ON c.id = n.card_id JOIN deques d ON d.id = c.deque_id JOIN languages l ON l.id = d.language_id JOIN scope s ON s.key_id = d.tags_scope_id JOIN tags tg ON tg.id = s.value_id OR tg.id=0 WHERE t.name = 'note' AND datetime(a.last_used_time + a.pace_time, 'unixepoch') < datetime('now') AND l.term_language = '$(term_lang)' AND l.definition_language = '$(definition_lang)' AND tg.name in ('$(tags)') ORDER BY a.last_used_time + a.pace_time ASC LIMIT {count};" },

    { "--": "selects new notes to learn" },
    { "sql_select_new_notes": "SELECT DISTINCT n.id, n.card_id, n.creation_time, n.mod_time, n.term, n.term_note, n.term_audio_id, n.image_id, n.definition, n.definition_note, n.definition_audio_id, n.times_used, datetime('now') AS last_used_time, $(minimal_time_interval_str) AS pace_time, 1.0 AS pace_factor, 1.0 AS repeat_factor, 1 AS reviews_count FROM notes n JOIN cards c ON c.id = n.card_id JOIN deques d ON d.id = c.deque_id JOIN languages l ON l.id = d.language_id JOIN types t ON t.name = 'note' LEFT OUTER JOIN achievements a ON a.item_id = n.id AND a.item_type_id = t.id JOIN scope stg ON stg.key_id = d.tags_scope_id JOIN tags tg ON tg.id = stg.value_id OR tg.id = 0 WHERE l.term_language = '$(term_lang)' AND l.definition_language = '$(definition_lang)' AND a.id IS NULL AND tg.name in ('$(tags)') ORDER BY n.creation_time ASC LIMIT {count}" },

    { "--": "selects blob data for note with id " },
    { "sql_select_note_media": "SELECT mi.data as image , mta.data as term_audio , mda.data as definition_audio FROM notes n LEFT OUTER JOIN media mi on mi.id = n.image_id LEFT OUTER JOIN media mta on mta.id = n.term_audio_id LEFT OUTER JOIN media mda on mda.id = n.definition_audio_id WHERE n.id = ? LIMIT 1" },

    { "sql_insert_speed_test_result": "INSERT INTO speedTestHistory(start_time, end_time, notes_count, note_ids_scope, words_count, symbols_count, speed_wpm, speed_spm, err_notes_count, err_note_ids_scope, err_words_count) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)" },


    { "sql_insert_item_to_scope": "INSERT INTO scope (scope_type_id, key_id, value_id) VALUES ((SELECT id FROM types WHERE name=?), ?, ?)" },


    { "sql_select_achievement_by_note_id": "SELECT * FROM achievements WHERE  item_type_id = (SELECT id FROM types WHERE name='note') AND item_id = ? LIMIT 1" },

    { "sql_update_achievement": "INSERT OR REPLACE INTO achievements(item_type_id, item_id, last_used_time, pace_time, learning_status_id, repeat_factor, pace_factor, reviews_count) VALUES ((SELECT id FROM types WHERE name = ?), ?, ?, ?, ?, ?, ?, ?)" },

    { "sql_select_speed_test_history": "SELECT id, start_time, end_time, notes_count, symbols_count, speed_wpm, speed_spm, err_words_count FROM speedTestHistory" },


    { "--": "--" }
]